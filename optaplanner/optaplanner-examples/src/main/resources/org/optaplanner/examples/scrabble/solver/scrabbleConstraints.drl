/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.scrabble.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;

import org.optaplanner.examples.scrabble.domain.ScrabbleWordDirection;
import org.optaplanner.examples.scrabble.domain.ScrabbleCell;
import org.optaplanner.examples.scrabble.domain.ScrabbleSolution;
import org.optaplanner.examples.scrabble.domain.ScrabbleWordAssignment;

global HardMediumSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "Character confict"
    when
        ScrabbleCell(characterSet.size() >= 2, $size : characterSet.size())
    then
        scoreHolder.addHardConstraintMatch(kcontext, 1 - $size);
end

rule "No parallel horizontal neighbours"
    when
        ScrabbleCell(hasWordSet(ScrabbleWordDirection.HORIZONTAL), $x : x, $y : y)
        ScrabbleCell(x == $x, y == $y + 1, hasWordSet(ScrabbleWordDirection.HORIZONTAL))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1); // TODO score trap
end

rule "No parallel vertical neighbours"
    when
        ScrabbleCell(hasWordSet(ScrabbleWordDirection.VERTICAL), $x : x, $y : y)
        ScrabbleCell(x == $x + 1, y == $y, hasWordSet(ScrabbleWordDirection.VERTICAL))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1); // TODO score trap
end

//rule "No parallel horizontal neighbours"
//    when
//        // TODO check overlap
//        ScrabbleWordAssignment(direction == ScrabbleWordDirection.HORIZONTAL, $leftY : startCell.y)
//        ScrabbleWordAssignment(direction == ScrabbleWordDirection.HORIZONTAL, startCell.y + 1 == $leftY)
//    then
//        scoreHolder.addHardConstraintMatch(kcontext, -1); // TODO score trap
//end
//
//rule "No parallel vertical neighbours"
//    when
//        // TODO check overlap
//        ScrabbleWordAssignment(direction == ScrabbleWordDirection.VERTICAL, $leftX : startCell.x)
//        ScrabbleWordAssignment(direction == ScrabbleWordDirection.VERTICAL, startCell.x + 1 == $leftX)
//    then
//        scoreHolder.addHardConstraintMatch(kcontext, -1); // TODO score trap
//end

rule "Out of grid"
    when
        ScrabbleWordAssignment(isOutOfGrid() == true, $wordLength : word.length())
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $wordLength);
end

// ############################################################################
// Medium constraints
// ############################################################################

//rule "Maximize merges"
//    when
//        ScrabbleCell(hasMerge() == true)
//    then
//        scoreHolder.addMediumConstraintMatch(kcontext, 1);
//end

rule "Maximize merges per word"
    when
        $w : ScrabbleWordAssignment()
        accumulate(
            $c : ScrabbleCell(wordSet.contains($w), hasMerge() == true);
            $total : count($c)
        )
    then
        scoreHolder.addMediumConstraintMatch(kcontext, $total.intValue() * $total.intValue());
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "Pull to the center"
    when
        ScrabbleWordAssignment($d : distanceToCenter)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $d);
end


